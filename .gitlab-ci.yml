stages:
  - linting
  - test
  - build_dist
  - sonarqube
  - publish

include:
  - template: Security/SAST.gitlab-ci.yml

linting:
  image: python:3.10
  stage: linting
  before_script:
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - pip install pylint
  script:
    - pylint src
    - pylint tests
  allow_failure: true

UnitTest:
  image: python:3.10
  stage: test
  before_script:
    - apt-get update && apt-get -y upgrade
    - apt-get install -y foma-bin
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - export PYTHONPATH="src"
  when: on_success
  script:
    - coverage run -m unittest discover
    - coverage report
    - coverage xml
  coverage: '/TOTAL.*\s+(\d+\%)/'
  artifacts:
    paths: 
      - coverage.xml
    expire_in: 1 day

sast:
  stage: test
  variables:
    SAST_EXCLUDED_PATHS: ${SAST_EXCLUDED_PATHS},${AKSARA_LEGACY_PATHS},tests/**

doctest:
  image: python:3.10
  stage: test
  before_script:
  - apt-get update && apt-get -y upgrade
  - apt-get install -y foma-bin
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - pip install -r requirements.txt
  - pip install -r doc_requirements.txt
  - export PYTHONPATH="../src"
  when: on_success
  script:
    - cd docs
    - make html
    - make doctest

build_distribution:
  image: python:3.10
  stage: build_dist
  before_script:
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r build_requirements.txt
  when: on_success
  script:
    - python -m build
  artifacts:
    paths:
      - dist/
    expire_in: 1 day

sonarqube-check:
  stage: sonarqube
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - main
    - development

publish-pypi:
  image: python:3.10
  stage: publish
  rules:
    - if: $CI_COMMIT_REF_SLUG =~ /^development/
      when: manual
      variables:
        TWINE_USERNAME: "${PYPI_TEST_USERNAME}"
        TWINE_PASSWORD: "${PYPI_TEST_PASSWORD}"
        TWINE_REPOSITORY: testpypi
    - if: $CI_COMMIT_REF_SLUG =~ /^main/
      when: manual
      variables:
        TWINE_USERNAME: "${PYPI_USERNAME}"
        TWINE_PASSWORD: "${PYPI_PASSWORD}"
        TWINE_REPOSITORY: pypi
  before_script:
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install twine
    - pip install -r build_requirements.txt
    - python -m build
  when: on_success
  script:
    - twine upload --non-interactive dist/*