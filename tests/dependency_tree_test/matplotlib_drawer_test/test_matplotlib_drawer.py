"""
Test Malplotlib Class

This test use PIL to compare referenced image with
the image generated by TreeDrawer Class.

Try to disable alpha-channel if you get false negative reports.

Well, this test is pretty fragile. But, i don't
have any other method to test The Drawer class (except manual inspection, obviously).
"""

import unittest
import os
from unittest.mock import patch, Mock
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from PIL import Image, ImageChops

from aksara.conllu import ConlluData
import aksara.dependency_tree.drawer.matplotlib_drawer
from aksara.dependency_tree.drawer import MatplotlibDrawer
from aksara.dependency_parser import DependencyParser
from aksara.pos_tagger import POSTagger

def is_image_eq(image_path_1: str, image_path_2: str):
    image_1 = Image.open(image_path_1).convert('L')
    image_2 = Image.open(image_path_2).convert('L')

    diff = ImageChops.difference(image_1, image_2)

    return not diff.getbbox()

def get_tmp_dir():
    dir_path = os.path.dirname(__file__)
    return os.path.join(dir_path, '.conllu_drawer_temp')

complate_conllu_ref = os.path.join(os.path.dirname(__file__), 'ref_images', 'complate_conllu.png')
upos_only_conllu_ref = os.path.join(os.path.dirname(__file__), 'ref_images', 'upos_only_conllu.png')

# pylint: disable=W0212
@patch(aksara.dependency_tree.drawer.matplotlib_drawer.__name__ + '.plt.show')
class MatplotlibDrawerTest(unittest.TestCase):
    """Test MatplotlibDrawer class
    """

    @classmethod
    def setUpClass(cls) -> None:
        os.mkdir(get_tmp_dir())
        return super().setUpClass()

    def setUp(self) -> None:
        text = 'Ani sudah memakai Python selama 5 tahun'
        parser = DependencyParser()
        self.complate_conllu = parser.parse(text)

        self.upos_only_conllu = []
        tagger = POSTagger()
        for list_form_tag in tagger.tag(text):
            tmp = []
            for i, (form, tag) in enumerate(list_form_tag):
                tmp.append(ConlluData(idx=str(i), form=form, upos=tag))
            self.upos_only_conllu.append(tmp)

        self.tree_drawer = MatplotlibDrawer()

        self.temp_path = os.path.join(get_tmp_dir(), 'image.png')
        return super().setUp()


    def tearDown(self) -> None:
        if os.path.exists(self.temp_path):
            os.remove(self.temp_path)

        return super().tearDown()

    @classmethod
    def tearDownClass(cls) -> None:
        os.rmdir(get_tmp_dir())
        return super().tearDownClass()

    @patch(
        aksara.dependency_tree.drawer.matplotlib_drawer.__name__ + '.print'
    )
    def test_compare_generated_complate_conllu_with_ref(self, *_):
        self.tree_drawer.draw(self.complate_conllu)
        self.tree_drawer.save_image(self.complate_conllu, self.temp_path)

        self.assertTrue(
            is_image_eq(self.temp_path, complate_conllu_ref),
            msg= f"Generated single root conllu and {complate_conllu_ref} are different"
        )

    @patch(
        aksara.dependency_tree.drawer.matplotlib_drawer.__name__ + '.print'
    )
    def test_compare_upos_only_conllu_with_ref(self, *_):
        self.tree_drawer.draw(self.upos_only_conllu)
        self.tree_drawer.save_image(self.upos_only_conllu ,self.temp_path)

        self.assertTrue(
            is_image_eq(self.temp_path, upos_only_conllu_ref),
            msg= f"Generated upos only conllu and {upos_only_conllu_ref} are different"
        )

    def test_should_create_axis_if_axs_empty(self, _):

        created_figure = self.tree_drawer.draw(self.complate_conllu)
        self.assertIsNotNone(created_figure)
        self.assertIsInstance(created_figure, Figure)

    def test_should_not_create_axis_if_axs_is_given(self, _):
        fig, axs = plt.subplots(len(self.complate_conllu))

        figure_used = self.tree_drawer.draw(self.complate_conllu, axs)
        self.assertEqual(fig, figure_used)

    def test_draw_should_accept_plt_axes(self, _):
        fig, axis = plt.subplots(1)

        figure_used = self.tree_drawer.draw(self.complate_conllu, axis)
        self.assertEqual(fig, figure_used)

    def test_raise_runtime_error_if_axs_is_not_one_dimension(self, _):
        _, axs = plt.subplots(nrows=2, ncols=3)

        with self.assertRaises(RuntimeError):
            self.tree_drawer.draw(self.complate_conllu, axs)

    def test_raise_error_if_axs_len_differ_from_conllu_datas(self, _):
        _, axs = plt.subplots(len(self.complate_conllu) + 1)

        with self.assertRaises(RuntimeError):
            self.tree_drawer.draw(self.complate_conllu, axs)

    @patch.object(aksara.dependency_tree.drawer.matplotlib_drawer.igraph, 'plot')
    @patch.object(aksara.dependency_tree.drawer.matplotlib_drawer.plt.Axes, 'clear')
    def test_clear_all_axes(self, plt_axes_mock: Mock, *_):

        _, axs = plt.subplots(len(self.complate_conllu))
        self.tree_drawer.draw(self.complate_conllu, axs)
        plt_axes_mock.assert_called()

    def test_should_not_call_plt_show_in_interactive_mode(self, plt_show_mock: Mock):
        is_before_interactive = plt.isinteractive()

        if not is_before_interactive:
            plt.ion()

        self.tree_drawer.draw(self.complate_conllu)

        plt_show_mock.assert_not_called()

        if not is_before_interactive:
            plt.ioff()

    def test_call_plt_show_when_not_in_interactive_mode(self, plt_show_mock: Mock):
        is_before_interactive = plt.isinteractive()

        if is_before_interactive:
            plt.ioff()

        self.tree_drawer.draw(self.complate_conllu)

        plt_show_mock.assert_called_once()

        if is_before_interactive:
            plt.ion()
